text file to test different cases for the matrix_divided function


    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

We now try different cases
 
    >>> matrix_divided([[1, 2, 3], [4, 5, 6], [10, 34, 56]], 4)
    [[0.25, 0.5, 0.75], [1.0, 1.25, 1.5], [2.5, 8.5, 14.0]]
    >>> matrix_divided([[5, 7, 3], [7, 4]], 2.3)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size
    >>> matrix_divided([[1, 2, 3], [4, 5, 6], [10, 34, 56]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero
    >>> matrix_divided([[1, 2, 3], [4, 5, 6], [10, 34, 56]])
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'
    >>> matrix_divided([[1, 3, None], [4, 6.7000, "hello"], [14, 0.540, 2]], 10)
    Traceback (most recent call last):
        ...
    TypeError: element must be a float or an integer
    >>> matrix_divided([[1, 2, 3], [4, 5, 6], [10, 34, True]], 4)
    Traceback (most recent call last):
        ...
    TypeError: element must be a float or an integer
    >>> matrix_divided([], 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    >>> matrix_divided(3, 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    >>> matrix_divided(6)
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'
